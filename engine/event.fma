;; Allows to control application using events.
;;
;; An event is a simple placeholder for source code which can be written
;; later on at a different point of the application.
;;
;; Events can be useful if you are interested in writing with modules in your
;; source code.
;;
;; [source,ruby]
;; ----
;; def main
;;   Event.invoke :application_initialize
;;
;;   JMP run_application
;; end
;;
;; Event.on :application_initialize do
;;   JSR initialize_map_module
;; end
;;
;; Event.on :application_initialize, order: Event.ORDER_FIRST do
;;   JSR initialize_sound_module
;; end
;; ----
;;
;; @package fma-snes
;; @author Benjamin Schulte <benj@minschulte.de>
;; @license MIT
module Event

  ;; Default order
  ORDER_DEFAULT = 0

  ;; First order
  ORDER_FIRST = -100

  ;; Order last
  ORDER_LAST = 100

  ;; Event manager for custom event management
  class Manager
    ;; Initializes the event manager class
    macro initialize
      self.events = {}
    end

    ;; Adds an event handler to the list of events
    ;;
    ;; Use **order** to specify the priority
    macro on(name, order=0, &block)
      self.events[name] = {} unless self.events.key? name
      self.events[name][order] = [] unless self.events[name].key? order
      self.events[name][order].append block
    end

    ;; Invokes an event
    macro invoke(name)
      return unless self.events.key? name

      self.events[name].keys.map {|a| a.to_n}.sort.each do |key|
        self.events[name][key].each do |block|
          block.call
        end
      end
    end
  end

  ;; The global event manager
  global = Manager.new

  ;; Adds an event handler to the list of events
  ;;
  ;; @param name string - the name of the event to hook into
  ;; @param order=Event.ORDER_DEFAULT number - a priority value for your hook, lower numbers will be called earlier
  macro on(*args, **kwargs, &block)
    Event.global.on *args, **kwargs, &block
  end

  ;; Invokes an event
  ;;
  ;; @param name string - the name of the event
  macro invoke(*args, **kwargs)
    Event.global.invoke *args, **kwargs
  end

end
