module Debug

  ;; Stores whether the debugger is enabled
  ENABLED = false

  ;; Enables debugging
  ;;
  ;; This needs to be called somewhere need to the start of the application
  macro enable
    Debug.ENABLED = true
  end

  ;; Adds a BRK operator (only in debug mode)
  macro BRK
    ::BRK if ENABLED
  end

  ;; Invokes the code inside the block only in debug mode
  ;;
  ;; [source,ruby]
  ;; ----
  ;; Debug.only do
  ;;   JSR debug_screen
  ;; end
  ;; ----
  macro only
    yield if ENABLED
  end

  ;; Logs a message to the emulator
  ;;
  ;; This feature is not supported by all emulators
  ;;
  ;; @param message string - the message which should be logged
  ;; @param level=:info string - one of `trace`, `debug`, `info`, `warn`, `error` or `fatal`
  macro log(*parts, **kwargs)
    return unless ENABLED

    level = :info
    if kwargs.key? :level
      level = kwargs[:level]
    end

    LEVEL_ID = "info"
    case level
    when :trace
      LEVEL_ID = "TRACE"
    when :debug
      LEVEL_ID = "DEBUG"
    when :info
      LEVEL_ID = "INFO"
    when :warn
      LEVEL_ID = "WARN"
    when :error
      LEVEL_ID = "ERROR"
    when :fatal
      LEVEL_ID = "FATAL"
    else
      raise "Unknown log level '#{level}'. Use trace, debug, info, warn, error, fatal"
    end

    message = ["PRINT ", LEVEL_ID, " "]
    parts.each do |part|
      if part.is_a? TypedNumber
        message.append "$\{"
        case part.type
        when :direct_page
          message.append "dp:"
          message.append part.number
        else
          raise "[ERROR] Do not know how to handle typed number #{part.type}"
        end
        message.append "\}"
      else
        message.append part
      end
    end

    _execute message
  end

  ;; Executes a command
  macro _execute(command)
    return unless Debug.ENABLED
    need_to_recover_p = false

    if A.size_8?
      need_to_recover_p = true
      CPU.set A:16
    end

    PHA
    LDA   #Compiler.command(command)
    STA   CPU.DEBUG.long_address
    PLA

    CPU.set A:8 if need_to_recover_p
  end

  ;; Counts ticks
  macro count_ticks(name)
    SNES65816_start_instruction_counter
    yield
    Compiler.print "#{name}: #{SNES65816_end_instruction_counter} ticks"
  end

  ;; Debugs the number of ticks
  macro @dump_ticks
    count_ticks Compiler.current_scope.current_function do
      yield
    end
  end
end
