;; Allow to use the DMA
;;
;; @package fma-snes
;; @author Benjamin Schulte <benj@minschulte.de>
;; @license MIT
module CPU
  ; Declares the registers
  class DMARegister
    ;; The control register
    declare :control, as: :uint8

    ;; The destination register
    declare :destination, as: :uint8

    ;; The source address
    declare :source_address, as: :uint16

    ;; The source bank
    declare :source_bank, as: :uint8

    ;; The size
    declare :size, as: :uint16

    declare :_unused, as: :uint8, length: 9


    ;; Configures the DMA
    ;;
    ;; The `transfer_mode` might be one of the following
    ;;
    ;; - `transfer_1_once`: 1 byte: p (default)
    ;; - `transfer_2_once`: 2 bytes: p, p+1
    ;; - `transfer_1_twice`: 2 bytes: p, p
    ;; - `transfer_2_twice_each`: 4 bytes: p, p, p+1, p+1
    ;; - `transfer_4_once`: 4 bytes: p, p+1, p+2, p+3
    ;; - `transfer_2_twice_alter`: 4 bytes: p, p+1, p, p+1
    ;;
    ;; @param transfer_mode string - the mode which should be used for transfer
    macro configure(transfer_mode=:transfer_1_once)
      value = 0
      case transfer_mode
      when :transfer_1_once
        value = 0
      when :transfer_2_once
        value = 1
      when :transfer_1_twice
        value = 2
      when :transfer_2_twice_each
        value = 3
      when :transfer_4_once
        value = 4
      when :transfer_2_twice_alter
        value = 5
      else
        raise "Invalid DMA configuration: #{transfer_mode}"
      end

      LDA   #value
      STA   self.control
    end

    ;; Sets the target register of the DMA
    ;;
    ;; @param register number - the register to write to
    macro set_destination(register)
      LDA   #register & $FF
      STA   self.destination
    end

    ;; Configures the origin
    ;;
    ;; @param address number - the address to use as origin (including bank)
    macro set_origin(address)
      raise "X register must fit 16 bit" unless X.size_16?

      LDX   #address
      STX   self.source_address
      LDA   #address.bank
      STA   self.source_bank
    end

    ;; Sets the size
    ;;
    ;; @param size number - the size of the data to copy (in bytes)
    macro set_size(size)
      raise "X register must fit 16 bit" unless X.size_16?

      if size.Y?
        STY   self.size
      else
        LDX   #size unless size.X?
        STX   self.size
      end
    end

    ;; Returns the own index
    macro index
      (self.control >> 4) & $7
    end

    ;; Triggers this DMA (no other)
    macro trigger
      CPU.trigger_dma self.index
    end
  end

  ; General register scope
  scope :_dmascope, at: $4300
end

module CPU
  ;; Triggers all indices passed to the arguments
  macro trigger_dma(*args)
    value = 0
    args.each do |index|
      value = value | (1 << index)
    end
    LDA #value
    STA $420B
  end
end

declare :DMA, as: CPU::DMARegister, in: CPU._dmascope, length: 8
